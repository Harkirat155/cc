name: Deploy Backend to Render

on:
  push:
    branches: [ main ]
    paths:
      - 'server/**'
      - '.github/workflows/deploy-backend.yml'
      - 'package.json'
      - 'package-lock.json'
  workflow_dispatch:
    inputs:
      clearCache:
        description: 'Clear Render build cache (true/false)'
        required: false
        default: 'false'

concurrency:
  group: deploy-backend
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
      CLEAR_CACHE: ${{ github.event.inputs.clearCache || 'false' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Ensure package-lock.json exists
        run: |
          if [ ! -f package-lock.json ]; then
            npm install --package-lock-only
          fi

      - name: Setup npm cache
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Quick server syntax check
        run: node --check server/server.js

      # Add test step here if/when tests exist for server logic
      #- name: Run tests
      #  run: npm test --if-present

      - name: Trigger Render deploy
        id: trigger
        env:
          SERVICE_ID: ${{ env.RENDER_SERVICE_ID }}
          API_KEY: ${{ env.RENDER_API_KEY }}
        run: |
          if [ -z "$SERVICE_ID" ] || [ -z "$API_KEY" ]; then
            echo "Missing Render secrets. Set RENDER_SERVICE_ID and RENDER_API_KEY in repo settings." >&2
            exit 1
          fi
          RESP=$(curl -s -X POST "https://api.render.com/v1/services/$SERVICE_ID/deploys" \
            -H "Authorization: Bearer $API_KEY" \
            -H 'Content-Type: application/json' \
            -d "{\"clearCache\": $CLEAR_CACHE}")
          echo "$RESP" | jq . >/dev/null 2>&1 || { echo "Non-JSON response from Render"; echo "$RESP"; exit 1; }
          ID=$(echo "$RESP" | jq -r .id)
          if [ "$ID" = "null" ] || [ -z "$ID" ]; then
            echo "Failed to get deploy id"; echo "$RESP"; exit 1; fi
          echo "deploy_id=$ID" >> $GITHUB_OUTPUT
          echo "Triggered deploy $ID"

      - name: Poll deploy status
        id: poll
        env:
          SERVICE_ID: ${{ env.RENDER_SERVICE_ID }}
          API_KEY: ${{ env.RENDER_API_KEY }}
          DEPLOY_ID: ${{ steps.trigger.outputs.deploy_id }}
        run: |
          echo "Polling deploy $DEPLOY_ID"
          ATTEMPTS=0
          MAX_ATTEMPTS=60  # ~10 min (sleep 10)
          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            ATTEMPTS=$((ATTEMPTS+1))
            STATUS_JSON=$(curl -s -H "Authorization: Bearer $API_KEY" "https://api.render.com/v1/services/$SERVICE_ID/deploys/$DEPLOY_ID")
            PHASE=$(echo "$STATUS_JSON" | jq -r .status)
            if [ "$PHASE" = "live" ]; then
              echo "status=$PHASE" >> $GITHUB_OUTPUT
              echo "Deploy succeeded"; exit 0; fi
            if [ "$PHASE" = "failed" ] || [ "$PHASE" = "canceled" ]; then
              echo "$STATUS_JSON"; echo "Deploy failed (status: $PHASE)" >&2; exit 1; fi
            echo "Attempt $ATTEMPTS: $PHASE"
            sleep 10
          done
          echo "Timed out waiting for deploy" >&2
          exit 1

      - name: Summary
        if: success()
        run: |
          echo "Backend deployment completed successfully."

      - name: Failure Summary
        if: failure()
        run: |
          echo "Backend deployment failed. See logs above." >&2
